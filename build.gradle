plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.4.2"
    id("io.micronaut.test-resources") version "4.4.2"
    id("io.micronaut.aot") version "4.4.2"
    id("maven-publish")
    id("signing")
    id('org.jreleaser') version '1.9.0'
}

version = "0.1"
group = "com.piyal"

repositories {
    mavenCentral()
}

dependencies {
    // jackson serialization - deserialization
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")

    //jdbc
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    runtimeOnly("mysql:mysql-connector-java")

    // flyway
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("org.flywaydb:flyway-mysql")

    // lombok
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"

    // yaml instead of properties
    runtimeOnly("org.yaml:snakeyaml")
}


application {
    mainClass = "com.piyal.Application"
}
java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}


graalvmNative.toolchainDetection = false

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.piyal.*")
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
    }
}


tasks.named("dockerfileNative") {
    jdkVersion = "21"
}

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            from(components["java"])
//
//            pom {
//                name.set("Assignment 6")
//                description.set("Assignment 6")
//                url.set("https://github.com/erudman21/micronaut-crud.git")
//                licenses {
//                    license {
//                        name.set("The Apache License, Version 2.0")
//                        url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
//                    }
//                }
//                developers {
//                    developer {
//                        id.set("erudman21")
//                        name.set("Eli Rudman")
//                    }
//                }
//                scm {
//                    connection.set("scm:git:git://github.com/erudman21/micronaut-crud.git")
//                    developerConnection.set("scm:git:ssh://github.com/erudman21/micronaut-crud.git")
//                    url.set("https://github.com/erudman21/micronaut-crud.git")
//                }
//            }
//        }
//    }
//    repositories {
//        maven {
//            url = layout.buildDirectory.dir('staging-deploy')
//        }
//    }
//}

jreleaser {
    project {
        name = "Assignment 6"
        version = project.version.toString()
        description = "Assignment 6"
        website = "https://github.com/erudman21/micronaut-crud"
        license = "Apache-2.0"
    }
    release {
        scm {
            tagName = project.version.toString()
        }
        github {
            owner = "erudman21"
            repository = "micronaut-crud"
        }
    }
    packagers {
        maven {
            active = true
            stagingRepository = "ossrh"
            artifacts {
                // Ensure the path matches your built JAR; adjust as necessary.
                artifact("build/libs/micronaut-crud-${project.version}.jar")
            }
        }
    }
    publishers {
        mavenCentral {
            active = true
            ossrh {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
    }
    signing {
        active = true
        mode = "in-memory"
        armoured = true
        secretKey = System.getenv("SIGNING_KEY")
        password = System.getenv("SIGNING_PASSWORD")
    }
}